// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}


// Models based on your application's needs
// Note: JSON type for answers and questions is a good choice for flexibility.

model Category {
  id             String    @id @default(cuid())
  name           String
  logoImageUrl   String?
  bannerImageUrl String?
  userCount      Int?
  description    String?
  languages      String?
  features       String[]
  tests          Test[]
}

model Test {
  id                   String     @id @default(cuid())
  title                String
  duration             Int // in minutes
  questions            Json
  marksPerCorrect      Int        @default(1)
  negativeMarksPerWrong Int       @default(0)
  guidelines           String?
  categoryId           String?
  category             Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  results              Result[]
}

model User {
  id                String       @id @default(cuid())
  fullName          String
  email             String       @unique
  password          String?
  profilePictureUrl String?
  role              String       @default("student") // 'student' or 'admin'
  createdAt         DateTime     @default(now())
  results           Result[]
}

model Result {
  id              String   @id @default(cuid())
  testId          String
  test            Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  score           Float
  correctCount    Int
  wrongCount      Int
  unansweredCount Int
  timeTaken       Int // in seconds
  answers         Json
  submittedAt     DateTime @default(now())

  @@unique([testId, userId])
}


model Report {
  id           String      @id @default(cuid())
  studentId    String
  studentName  String
  testId       String
  testTitle    String
  questionId   String
  questionText String
  reason       String
  remarks      String?
  status       String      @default("pending") // pending, responded
  chat         Json
  createdAt    DateTime    @default(now())
}

model ChatThread {
  id            String   @id @default(cuid())
  studentId     String   @unique
  studentName   String
  messages      Json
  lastMessageAt DateTime @default(now())
  seenByAdmin   Boolean  @default(false)
}

model SarthiBotTrainingData {
    id       String @id @default(cuid())
    question String
    answer   String
}

model SarthiBotConversation {
    id           String   @id @default(cuid())
    studentId    String   @unique
    studentName  String
    messages     Json
    lastMessageAt DateTime @default(now())
}


model Feedback {
  id        String   @id @default(cuid())
  studentId String
  fullName  String
  city      String
  message   String
  photoUrl  String?
  createdAt DateTime @default(now())
  status    String   @default("pending") // pending, approved, rejected
  order     Int?
}

model SiteSettings {
  id                      String    @id @default("default")
  logoUrl                 String?
  botName                 String?
  botAvatarUrl            String?
  botIntroMessage         String?
  isBotEnabled            Boolean?
  isNewsBannerEnabled     Boolean?
  newsBannerImageUrl      String?
  newsBannerTitle         String?
  newsBannerLink          String?
  newsBannerDisplayRule   String?   @default("session") // 'always' or 'session'
  heroBannerText          String?
  isHeroBannerTextEnabled Boolean?
  heroBannerImageUrl      String?
  heroBannerOverlayOpacity Float?
  adminChatAutoReply      String?
}
