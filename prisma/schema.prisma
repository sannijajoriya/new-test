// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

model Test {
  id                    String     @id @default(cuid())
  title                 String
  duration              Int
  questions             Json
  marksPerCorrect       Int        @default(1)
  negativeMarksPerWrong Int        @default(0)
  guidelines            String?
  categoryId            String?
  category              Category?  @relation(fields: [categoryId], references: [id])
  results               Result[]
  reports               Report[]
}

model Category {
  id             String  @id @default(cuid())
  name           String  @unique
  logoImageUrl   String?
  bannerImageUrl String?
  userCount      Int?
  description    String?
  languages      String?
  features       Json?
  tests          Test[]
}

model User {
  id                String                  @id @default(cuid())
  fullName          String
  email             String                  @unique
  password          String?
  profilePictureUrl String?
  role              String                  @default("student") // "student" or "admin"
  createdAt         DateTime                @default(now())
  results           Result[]
  reports           Report[]
  threads           ChatThread[]
  sarthiBotConvos   SarthiBotConversation[]
  feedbacks         Feedback[]
}

model Result {
  id              String   @id @default(cuid())
  testId          String
  userId          String
  score           Int
  correctCount    Int
  wrongCount      Int
  unansweredCount Int
  timeTaken       Int
  answers         Json
  submittedAt     DateTime @default(now())
  test            Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([testId, userId])
}

model Report {
  id           String    @id @default(cuid())
  studentId    String
  studentName  String
  testId       String
  testTitle    String
  questionId   String
  questionText String
  reason       String
  remarks      String?
  status       String    @default("pending") // "pending" or "responded"
  chat         Json
  createdAt    DateTime  @default(now())
  student      User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  test         Test      @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model ChatThread {
  id            String   @id @default(cuid())
  studentId     String   @unique
  studentName   String
  messages      Json
  lastMessageAt DateTime @default(now())
  seenByAdmin   Boolean  @default(false)
  student       User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String   @id @default(cuid())
  studentId String
  fullName  String
  city      String
  message   String
  photoUrl  String?
  createdAt DateTime @default(now())
  status    String   @default("pending") // "pending", "approved", "rejected"
  order     Int?
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model SiteSettings {
  id                        String    @id @default("default")
  logoUrl                   String?
  botName                   String?
  botAvatarUrl              String?
  botIntroMessage           String?
  isBotEnabled              Boolean?
  isNewsBannerEnabled       Boolean?
  newsBannerImageUrl        String?
  newsBannerTitle           String?
  newsBannerLink            String?
  newsBannerDisplayRule     String?   @default("session") // "always" or "session"
  heroBannerText            String?
  isHeroBannerTextEnabled   Boolean?
  heroBannerImageUrl        String?
  heroBannerOverlayOpacity  Float?
  adminChatAutoReply        String?
}


model SarthiBotTrainingData {
  id       String @id @default(cuid())
  question String
  answer   String
}

model SarthiBotConversation {
  id            String   @id @default(cuid())
  studentId     String   @unique
  studentName   String
  messages      Json
  lastMessageAt DateTime @default(now())
  student       User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}
