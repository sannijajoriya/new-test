datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Test {
  id                    String  @id @default(cuid())
  title                 String
  duration              Int
  questions             String // Stored as a JSON string
  marksPerCorrect       Int     @default(1)
  negativeMarksPerWrong Int     @default(0)
  guidelines            String?
  categoryId            String?
  category              Category? @relation(fields: [categoryId], references: [id])
  results               Result[]
  reports               Report[]
}

model Category {
  id             String  @id @default(cuid())
  name           String  @unique
  logoImageUrl   String?
  bannerImageUrl String?
  userCount      Int?
  description    String?
  languages      String?
  features       String? // Stored as a comma-separated string
  tests          Test[]
}

model User {
  id                    String   @id @default(cuid())
  fullName              String
  email                 String   @unique
  password              String?
  profilePictureUrl     String?
  role                  String   @default("student") // "student" or "admin"
  createdAt             DateTime @default(now())
  results               Result[]
  reports               Report[]
  feedbacks             Feedback[]
  sarthiBotConversation SarthiBotConversation?
  chatThread            ChatThread?
}

model Result {
  id              String   @id @default(cuid())
  testId          String
  test            Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  score           Int
  correctCount    Int
  wrongCount      Int
  unansweredCount Int
  timeTaken       Int
  answers         String // Stored as a JSON string
  submittedAt     DateTime @default(now())

  @@unique([testId, userId])
}

model Report {
  id           String   @id @default(cuid())
  studentId    String
  student      User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  testId       String
  test         Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  questionId   String
  questionText String
  reason       String
  remarks      String?
  status       String   @default("pending") // "pending" or "responded"
  chat         String // Stored as a JSON string
  createdAt    DateTime @default(now())
}

model ChatThread {
  id            String   @id @default(cuid())
  studentId     String   @unique
  student       User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentName   String
  messages      String // Stored as a JSON string
  lastMessageAt DateTime @default(now())
  seenByAdmin   Boolean  @default(false)
}

model Feedback {
  id        String   @id @default(cuid())
  studentId String
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  fullName  String
  city      String
  message   String
  photoUrl  String?
  createdAt DateTime @default(now())
  status    String   @default("pending") // "pending", "approved", "rejected"
  order     Int?
}

model SiteSettings {
  id                      String    @id @default("default")
  logoUrl                 String?
  botName                 String?
  botAvatarUrl            String?
  botIntroMessage         String?
  isBotEnabled            Boolean?  @default(true)
  isNewsBannerEnabled     Boolean?  @default(false)
  newsBannerImageUrl      String?
  newsBannerTitle         String?
  newsBannerLink          String?
  newsBannerDisplayRule   String?   @default("session") // "always" or "session"
  heroBannerText          String?
  isHeroBannerTextEnabled Boolean?  @default(true)
  heroBannerImageUrl      String?
  heroBannerOverlayOpacity Float?   @default(0.3)
  adminChatAutoReply      String?
}

model SarthiBotTrainingData {
    id        String @id @default(cuid())
    question  String
    answer    String
}

model SarthiBotConversation {
    id            String @id @default(cuid())
    studentId     String @unique
    student       User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
    studentName   String
    messages      String // Stored as a JSON string
    lastMessageAt DateTime @default(now())
}
